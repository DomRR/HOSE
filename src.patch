diff -Naur src_origin/main/java/net/minecraft/server/EntityPlayer.java src/main/java/net/minecraft/server/EntityPlayer.java
--- src_origin/main/java/net/minecraft/server/EntityPlayer.java	2017-05-06 23:42:12.679754107 +0800
+++ src/main/java/net/minecraft/server/EntityPlayer.java	2017-05-06 23:42:03.656753262 +0800
@@ -14,6 +14,9 @@
 
 // CraftBukkit start
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Queues;
+import java.util.LinkedList;
+import java.util.Queue;
 import org.bukkit.Bukkit;
 import org.bukkit.GameMode;
 import org.bukkit.WeatherType;
@@ -37,7 +40,8 @@
     public final PlayerInteractManager playerInteractManager;
     public double d;
     public double e;
-    public final List<Integer> removeQueue = Lists.newLinkedList();
+    //public final List<Integer> removeQueue = Lists.newLinkedList();
+    public final Queue<Integer> removeQueue = Queues.newConcurrentLinkedQueue();
     private final ServerStatisticManager bU;
     private float bV = Float.MIN_VALUE;
     private int bW = Integer.MIN_VALUE;
@@ -958,7 +962,10 @@
         this.lastSentExp = -1;
         this.lastHealthSent = -1.0F;
         this.cc = -1;
-        this.removeQueue.addAll(((EntityPlayer) entityhuman).removeQueue);
+        //this.removeQueue.addAll(((EntityPlayer) entityhuman).removeQueue);
+        Queue<Integer> q2 = Queues.newConcurrentLinkedQueue();
+        ((EntityPlayer) entityhuman).removeQueue.stream().forEach(eh -> q2.add(eh));
+        q2.stream().forEach(eh -> this.removeQueue.add(eh));
     }
 
     protected void a(MobEffect mobeffect) {
diff -Naur src_origin/main/java/net/minecraft/server/EntityTrackerEntry.java src/main/java/net/minecraft/server/EntityTrackerEntry.java
--- src_origin/main/java/net/minecraft/server/EntityTrackerEntry.java	2017-05-06 23:42:12.840754122 +0800
+++ src/main/java/net/minecraft/server/EntityTrackerEntry.java	2017-05-06 23:42:03.836753279 +0800
@@ -1,10 +1,12 @@
 package net.minecraft.server;
 
+import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
 import java.util.Set;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -41,7 +43,8 @@
     private boolean x;
     private boolean y;
     public boolean b;
-    public final Set<EntityPlayer> trackedPlayers = Sets.newHashSet();
+    //public final Set<EntityPlayer> trackedPlayers = Sets.newHashSet();
+    public final Set<EntityPlayer> trackedPlayers = Sets.newConcurrentHashSet();
 
     public EntityTrackerEntry(Entity entity, int i, int j, int k, boolean flag) {
         this.tracker = entity;
@@ -66,7 +69,8 @@
         return this.tracker.getId();
     }
 
-    public void track(List<EntityHuman> list) {
+    //public void track(List<EntityHuman> list) {
+    public void track(Queue<EntityHuman> list) {
         this.b = false;
         if (!this.isMoving || this.tracker.d(this.q, this.r, this.s) > 16.0D) {
             this.q = this.tracker.locX;
@@ -91,6 +95,19 @@
 
             if (this.a % 10 == 0 && itemstack.getItem() instanceof ItemWorldMap) { // CraftBukkit - Moved this.a % 10 logic here so item frames do not enter the other blocks
                 WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, this.tracker.world);
+                
+                this.trackedPlayers.stream().forEach(iterator -> {
+                    EntityHuman entityhuman = (EntityHuman) iterator;
+                    EntityPlayer entityplayer = (EntityPlayer) entityhuman;
+
+                    worldmap.a(entityplayer, itemstack);
+                    Packet packet = Items.FILLED_MAP.a(itemstack, this.tracker.world, (EntityHuman) entityplayer);
+
+                    if (packet != null) {
+                        entityplayer.playerConnection.sendPacket(packet);
+                    }
+                });
+                /*
                 Iterator iterator = this.trackedPlayers.iterator(); // CraftBukkit
 
                 while (iterator.hasNext()) {
@@ -103,7 +120,7 @@
                     if (packet != null) {
                         entityplayer.playerConnection.sendPacket(packet);
                     }
-                }
+                }*/
             }
 
             this.d();
@@ -171,7 +188,8 @@
                         this.v = 0;
                         // CraftBukkit start - Refresh list of who can see a player before sending teleport packet
                         if (this.tracker instanceof EntityPlayer) {
-                            this.scanPlayers(new java.util.ArrayList(this.trackedPlayers));
+                            //this.scanPlayers(new java.util.ArrayList(this.trackedPlayers));
+                            this.scanPlayers(Queues.newConcurrentLinkedQueue(this.trackedPlayers));
                         }
                         // CraftBukkit end
                         this.c();
@@ -336,7 +354,8 @@
                         }
                     }
 
-                    entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
+                    //entityplayer.removeQueue.remove(Integer.valueOf(this.tracker.getId()));
+                    entityplayer.removeQueue.remove(this.tracker.getId());
                     // CraftBukkit end
                     this.trackedPlayers.add(entityplayer);
                     Packet packet = this.e();
@@ -444,10 +463,13 @@
         return entityplayer.x().getPlayerChunkMap().a(entityplayer, this.tracker.ab, this.tracker.ad);
     }
 
-    public void scanPlayers(List<EntityHuman> list) {
+    //public void scanPlayers(List<EntityHuman> list) {
+    public void scanPlayers(Queue<EntityHuman> list) {
+        /*
         for (int i = 0; i < list.size(); ++i) {
             this.updatePlayer((EntityPlayer) list.get(i));
-        }
+        }*/
+        list.stream().forEach(pl -> this.updatePlayer((EntityPlayer) pl));
 
     }
 
diff -Naur src_origin/main/java/net/minecraft/server/EntityTracker.java src/main/java/net/minecraft/server/EntityTracker.java
--- src_origin/main/java/net/minecraft/server/EntityTracker.java	2017-05-06 23:42:12.832754121 +0800
+++ src/main/java/net/minecraft/server/EntityTracker.java	2017-05-06 23:42:03.815753277 +0800
@@ -1,9 +1,11 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
 import com.google.common.collect.Sets;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.Queue;
 import java.util.Set;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -149,8 +151,8 @@
         }
 
     }
-
-    public void untrackEntity(Entity entity) {
+    
+    public void untrackEntity(Entity entity) {//the problem is here
         org.spigotmc.AsyncCatcher.catchOp( "entity untrack"); // Spigot
         if (entity instanceof EntityPlayer) {
             EntityPlayer entityplayer = (EntityPlayer) entity;
@@ -169,10 +171,11 @@
             this.c.remove(entitytrackerentry1);
             entitytrackerentry1.a();
         }
-
+        
     }
 
     public void updatePlayers() {
+        /*
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.c.iterator();
 
@@ -200,8 +203,22 @@
                     entitytrackerentry1.updatePlayer(entityplayer);
                 }
             }
-        }
+        }*/
+        Queue arraylist = Queues.newConcurrentLinkedQueue();
+        this.c.parallelStream().forEach(entitytrackerentry -> {
+            entitytrackerentry.track(this.world.players);
+            if (entitytrackerentry.b) {
+                Entity entity = entitytrackerentry.b();
 
+                if (entity instanceof EntityPlayer) {
+                    arraylist.add((EntityPlayer) entity);
+                }
+            }
+        });
+        
+        arraylist.parallelStream().forEach(entityplayer -> {
+            this.c.parallelStream().filter(entitytrackerentry1 -> entitytrackerentry1.b() != entityplayer).forEach(entitytrackerentry1 -> entitytrackerentry1.updatePlayer((EntityPlayer) entityplayer));
+        });
     }
 
     public void a(EntityPlayer entityplayer) {
@@ -237,6 +254,7 @@
 
     }
 
+    Set<EntityTrackerEntry> remove_untrack = Sets.newConcurrentHashSet();
     public void untrackPlayer(EntityPlayer entityplayer) {
         Iterator iterator = this.c.iterator();
 
@@ -245,7 +263,24 @@
 
             entitytrackerentry.clear(entityplayer);
         }
+        //remove all untrack here
+        
+        for (EntityTrackerEntry ete: this.c) {
+            int exist_count = 0;
+            for (Entity ent:this.world.entityList) {
+                if (ent.getId() == ete.hashCode()) {
+                    exist_count++;
+                }
+            }
 
+            if (exist_count == 0) {
+                remove_untrack.add(ete);
+            }
+        }
+        
+        
+        this.c.removeAll(remove_untrack);
+        remove_untrack.clear();
     }
 
     public void a(EntityPlayer entityplayer, Chunk chunk) {
diff -Naur src_origin/main/java/net/minecraft/server/MinecraftServer.java src/main/java/net/minecraft/server/MinecraftServer.java
--- src_origin/main/java/net/minecraft/server/MinecraftServer.java	2017-05-06 23:42:13.394754174 +0800
+++ src/main/java/net/minecraft/server/MinecraftServer.java	2017-05-06 23:42:04.236753317 +0800
@@ -1044,7 +1044,8 @@
     }
 
     public String getServerModName() {
-        return "Spigot"; // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        //return "Spigot"; // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "Hose"; // Hose > Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
@@ -1126,7 +1127,8 @@
     }
 
     public String getName() {
-        return "Server";
+        //return "Server";
+        return org.bukkit.ChatColor.GREEN + "Server";
     }
 
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
diff -Naur src_origin/main/java/net/minecraft/server/PlayerList.java src/main/java/net/minecraft/server/PlayerList.java
--- src_origin/main/java/net/minecraft/server/PlayerList.java	2017-05-06 23:42:13.760754208 +0800
+++ src/main/java/net/minecraft/server/PlayerList.java	2017-05-06 23:42:04.698753360 +0800
@@ -995,9 +995,11 @@
     }
 
     public void sendAll(Packet packet, World world) {
+        world.players.stream().forEach(pl -> ((EntityPlayer) pl).playerConnection.sendPacket(packet));
+        /*
         for (int i = 0; i < world.players.size(); ++i) {
             ((EntityPlayer) world.players.get(i)).playerConnection.sendPacket(packet);
-        }
+        }*/
 
     }
     // CraftBukkit end
diff -Naur src_origin/main/java/net/minecraft/server/VillageSiege.java src/main/java/net/minecraft/server/VillageSiege.java
--- src_origin/main/java/net/minecraft/server/VillageSiege.java	2017-05-06 23:42:14.110754241 +0800
+++ src/main/java/net/minecraft/server/VillageSiege.java	2017-05-06 23:42:05.017753390 +0800
@@ -2,6 +2,7 @@
 
 import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
 import javax.annotation.Nullable;
 
 public class VillageSiege {
@@ -64,7 +65,58 @@
     }
 
     private boolean b() {
-        List list = this.a.players;
+        //List list = this.a.players;
+        for (EntityHuman entityhuman:this.a.players) {
+            if (!entityhuman.isSpectator()) {
+                this.f = this.a.ai().getClosestVillage(new BlockPosition(entityhuman), 1);
+                if (this.f != null && this.f.c() >= 10 && this.f.d() >= 20 && this.f.e() >= 20) {
+                    BlockPosition blockposition = this.f.a();
+                    float f = (float) this.f.b();
+                    boolean flag = false;
+                    int i = 0;
+
+                    while (true) {
+                        if (i < 10) {
+                            float f1 = this.a.random.nextFloat() * 6.2831855F;
+
+                            this.g = blockposition.getX() + (int) ((double) (MathHelper.cos(f1) * f) * 0.9D);
+                            this.h = blockposition.getY();
+                            this.i = blockposition.getZ() + (int) ((double) (MathHelper.sin(f1) * f) * 0.9D);
+                            flag = false;
+                            Iterator iterator1 = this.a.ai().getVillages().iterator();
+
+                            while (iterator1.hasNext()) {
+                                Village village = (Village) iterator1.next();
+
+                                if (village != this.f && village.a(new BlockPosition(this.g, this.h, this.i))) {
+                                    flag = true;
+                                    break;
+                                }
+                            }
+
+                            if (flag) {
+                                ++i;
+                                continue;
+                            }
+                        }
+
+                        if (flag) {
+                            return false;
+                        }
+
+                        Vec3D vec3d = this.a(new BlockPosition(this.g, this.h, this.i));
+
+                        if (vec3d != null) {
+                            this.e = 0;
+                            this.d = 20;
+                            return true;
+                        }
+                        break;
+                    }
+                }
+            }
+        }
+        /*
         Iterator iterator = list.iterator();
 
         while (iterator.hasNext()) {
@@ -118,7 +170,7 @@
                     }
                 }
             }
-        }
+        }*/
 
         return false;
     }
diff -Naur src_origin/main/java/net/minecraft/server/WorldData.java src/main/java/net/minecraft/server/WorldData.java
--- src_origin/main/java/net/minecraft/server/WorldData.java	2017-05-06 23:42:14.142754244 +0800
+++ src/main/java/net/minecraft/server/WorldData.java	2017-05-06 23:42:05.034753391 +0800
@@ -630,9 +630,13 @@
         this.C = enumdifficulty;
         // CraftBukkit start
         PacketPlayOutServerDifficulty packet = new PacketPlayOutServerDifficulty(this.getDifficulty(), this.isDifficultyLocked());
-        for (EntityPlayer player : (java.util.List<EntityPlayer>) (java.util.List) world.players) {
+        for (EntityPlayer player : (java.util.Queue<EntityPlayer>) (java.util.Queue) world.players) {
             player.playerConnection.sendPacket(packet);
         }
+        /*
+        for (EntityPlayer player : (java.util.List<EntityPlayer>) (java.util.List) world.players) {
+            player.playerConnection.sendPacket(packet);
+        }*/
         // CraftBukkit end
     }
 
diff -Naur src_origin/main/java/net/minecraft/server/World.java src/main/java/net/minecraft/server/World.java
--- src_origin/main/java/net/minecraft/server/World.java	2017-05-06 23:42:14.166754246 +0800
+++ src/main/java/net/minecraft/server/World.java	2017-05-06 23:42:05.098753397 +0800
@@ -15,7 +15,9 @@
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
 import java.util.Map;
+import java.util.Queue;
 import org.bukkit.Bukkit;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.SpigotTimings; // Spigot
@@ -64,7 +66,8 @@
     public final List<TileEntity> tileEntityListTick = Lists.newArrayList();
     private final List<TileEntity> b = Lists.newArrayList();
     private final List<TileEntity> tileEntityListUnload = Lists.newArrayList();
-    public final List<EntityHuman> players = Lists.newArrayList();
+    //public final List<EntityHuman> players = Lists.newArrayList();
+    public final Queue<EntityHuman> players = Queues.newConcurrentLinkedQueue();
     public final List<Entity> j = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
     private final long I = 16777215L;
@@ -2139,11 +2142,13 @@
                 this.o = MathHelper.a(this.o, 0.0F, 1.0F);
 
                 // CraftBukkit start
+                this.players.stream().filter(pl -> ((EntityPlayer) pl).world == this).forEach(pltw -> ((EntityPlayer) pltw).tickWeather());
+                /*
                 for (int idx = 0; idx < this.players.size(); ++idx) {
                     if (((EntityPlayer) this.players.get(idx)).world == this) {
                         ((EntityPlayer) this.players.get(idx)).tickWeather();
                     }
-                }
+                }*/
                 // CraftBukkit end
             }
         }
@@ -2689,7 +2694,23 @@
     public EntityHuman a(double d0, double d1, double d2, double d3, Predicate<Entity> predicate) {
         double d4 = -1.0D;
         EntityHuman entityhuman = null;
+        
+        for (EntityHuman entityhuman1: this.players) {
+            if (entityhuman1 == null || entityhuman1.dead) {
+                continue;
+            }
+            // CraftBukkit end
+
+            if (predicate.apply(entityhuman1)) {
+                double d5 = entityhuman1.d(d0, d1, d2);
 
+                if ((d3 < 0.0D || d5 < d3 * d3) && (d4 == -1.0D || d5 < d4)) {
+                    d4 = d5;
+                    entityhuman = entityhuman1;
+                }
+            }
+        }
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
             // CraftBukkit start - Fixed an NPE
@@ -2706,25 +2727,24 @@
                     entityhuman = entityhuman1;
                 }
             }
-        }
+        }*/
 
         return entityhuman;
     }
 
     public boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
-
-            if (IEntitySelector.e.apply(entityhuman)) {
-                double d4 = entityhuman.d(d0, d1, d2);
-
-                if (d3 < 0.0D || d4 < d3 * d3) {
-                    return true;
-                }
-            }
+        EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+        if (IEntitySelector.e.apply(entityhuman)) {
+        double d4 = entityhuman.d(d0, d1, d2);
+        if (d3 < 0.0D || d4 < d3 * d3) {
+        return true;
+        }
         }
+        }*/ 
 
-        return false;
+        return this.players.stream().filter((entityhuman) -> (IEntitySelector.e.apply(entityhuman))).map((entityhuman) -> entityhuman.d(d0, d1, d2)).anyMatch((d4) -> (d3 < 0.0D || d4 < d3 * d3));
     }
 
     @Nullable
@@ -2742,6 +2762,36 @@
         double d5 = -1.0D;
         EntityHuman entityhuman = null;
 
+        for (EntityHuman entityhuman1: this.players) {
+            if (!entityhuman1.abilities.isInvulnerable && entityhuman1.isAlive() && !entityhuman1.isSpectator() && (predicate == null || predicate.apply(entityhuman1))) {
+                double d6 = entityhuman1.d(d0, entityhuman1.locY, d2);
+                double d7 = d3;
+
+                if (entityhuman1.isSneaking()) {
+                    d7 = d3 * 0.800000011920929D;
+                }
+
+                if (entityhuman1.isInvisible()) {
+                    float f = entityhuman1.cO();
+
+                    if (f < 0.1F) {
+                        f = 0.1F;
+                    }
+
+                    d7 *= (double) (0.7F * f);
+                }
+
+                if (function != null) {
+                    d7 *= ((Double) Objects.firstNonNull(function.apply(entityhuman1), Double.valueOf(1.0D))).doubleValue();
+                }
+
+                if ((d4 < 0.0D || Math.abs(entityhuman1.locY - d1) < d4 * d4) && (d3 < 0.0D || d6 < d7 * d7) && (d5 == -1.0D || d6 < d5)) {
+                    d5 = d6;
+                    entityhuman = entityhuman1;
+                }
+            }
+        }
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
 
@@ -2772,33 +2822,45 @@
                     entityhuman = entityhuman1;
                 }
             }
-        }
+        }*/
 
         return entityhuman;
     }
 
     @Nullable
     public EntityHuman a(String s) {
+        for (EntityHuman entityhuman: this.players) {
+            if (s.equals(entityhuman.getName())) {
+                return entityhuman;
+            }
+        }
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
             if (s.equals(entityhuman.getName())) {
                 return entityhuman;
             }
-        }
+        }*/
 
         return null;
     }
 
     @Nullable
     public EntityHuman b(UUID uuid) {
+        for (EntityHuman entityhuman: this.players) {
+            if (uuid.equals(entityhuman.getUniqueID())) {
+                return entityhuman;
+            }
+        }
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
             if (uuid.equals(entityhuman.getUniqueID())) {
                 return entityhuman;
             }
-        }
+        }*/
 
         return null;
     }
diff -Naur src_origin/main/java/net/minecraft/server/WorldServer.java src/main/java/net/minecraft/server/WorldServer.java
--- src_origin/main/java/net/minecraft/server/WorldServer.java	2017-05-06 23:42:14.296754258 +0800
+++ src/main/java/net/minecraft/server/WorldServer.java	2017-05-06 23:42:05.181753405 +0800
@@ -386,7 +386,9 @@
         this.methodProfiler.a("playerCheckLight");
         if (spigotConfig.randomLightUpdates && !this.players.isEmpty()) { // Spigot
             int i = this.random.nextInt(this.players.size());
-            EntityHuman entityhuman = (EntityHuman) this.players.get(i);
+            ArrayList rndarr = new ArrayList(this.players);
+            EntityHuman entityhuman = (EntityHuman) rndarr.get(i);
+            //EntityHuman entityhuman = (EntityHuman) this.players.get(i);
             int j = MathHelper.floor(entityhuman.locX) + this.random.nextInt(11) - 5;
             int k = MathHelper.floor(entityhuman.locY) + this.random.nextInt(11) - 5;
             int l = MathHelper.floor(entityhuman.locZ) + this.random.nextInt(11) - 5;
@@ -623,6 +625,47 @@
         super.l();
         this.methodProfiler.c("players");
 
+        for (Entity entity: this.players) {
+            Entity entity1 = entity.bB();
+
+            if (entity1 != null) {
+                if (!entity1.dead && entity1.w(entity)) {
+                    continue;
+                }
+
+                entity.stopRiding();
+            }
+
+            this.methodProfiler.a("tick");
+            if (!entity.dead) {
+                try {
+                    this.h(entity);
+                } catch (Throwable throwable) {
+                    CrashReport crashreport = CrashReport.a(throwable, "Ticking player");
+                    CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Player being ticked");
+
+                    entity.appendEntityCrashDetails(crashreportsystemdetails);
+                    throw new ReportedException(crashreport);
+                }
+            }
+
+            this.methodProfiler.b();
+            this.methodProfiler.a("remove");
+            if (entity.dead) {
+                int j = entity.ab;
+                int k = entity.ad;
+
+                if (entity.aa && this.isChunkLoaded(j, k, true)) {
+                    this.getChunkAt(j, k).b(entity);
+                }
+
+                this.entityList.remove(entity);
+                this.c(entity);
+            }
+
+            this.methodProfiler.b();
+        }
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             Entity entity = (Entity) this.players.get(i);
             Entity entity1 = entity.bB();
@@ -663,7 +706,7 @@
             }
 
             this.methodProfiler.b();
-        }
+        }*/
 
     }
 
@@ -1278,17 +1321,21 @@
         // */
         if (flag != this.W()) {
             // Only send weather packets to those affected
+            this.players.stream().filter(pl -> ((EntityPlayer) pl).world == this).forEach(pl -> ((EntityPlayer) pl).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false));
+            /*
             for (int i = 0; i < this.players.size(); ++i) {
                 if (((EntityPlayer) this.players.get(i)).world == this) {
                     ((EntityPlayer) this.players.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
                 }
-            }
+            }*/
         }
+        this.players.stream().filter(pl -> ((EntityPlayer) pl).world == this).forEach(pl -> ((EntityPlayer) pl).updateWeather(this.n, this.o, this.p, this.q));
+        /*
         for (int i = 0; i < this.players.size(); ++i) {
             if (((EntityPlayer) this.players.get(i)).world == this) {
                 ((EntityPlayer) this.players.get(i)).updateWeather(this.n, this.o, this.p, this.q);
             }
-        }
+        }*/
         // CraftBukkit end
 
     }
@@ -1327,6 +1374,15 @@
         // CraftBukkit end
         PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(enumparticle, flag, (float) d0, (float) d1, (float) d2, (float) d3, (float) d4, (float) d5, (float) d6, i, aint);
 
+        for (EntityHuman entityplayer: this.players){
+            if (sender != null && !((EntityPlayer)entityplayer).getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+            BlockPosition blockposition = ((EntityPlayer)entityplayer).getChunkCoordinates();
+            double d7 = blockposition.distanceSquared(d0, d1, d2);
+
+
+            this.a((EntityPlayer)entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
+        }
+        /*
         for (int j = 0; j < this.players.size(); ++j) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
             if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
@@ -1335,7 +1391,7 @@
 
 
             this.a(entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
-        }
+        }*/
 
     }
 
diff -Naur src_origin/main/java/org/spigotmc/AsyncCatcher.java src/main/java/org/spigotmc/AsyncCatcher.java
--- src_origin/main/java/org/spigotmc/AsyncCatcher.java	2017-05-06 23:42:09.653753824 +0800
+++ src/main/java/org/spigotmc/AsyncCatcher.java	2017-05-06 23:42:01.533753064 +0800
@@ -11,7 +11,8 @@
     {
         if ( enabled && Thread.currentThread() != MinecraftServer.getServer().primaryThread )
         {
-            throw new IllegalStateException( "Asynchronous " + reason + "!" );
+            //throw new IllegalStateException( "Asynchronous " + reason + "!" );
+            //System.out.println( "Asynchronous " + reason + "!" );
         }
     }
 }
