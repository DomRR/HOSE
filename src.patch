diff -Naur src_origin/main/java/com/destroystokyo/paper/PaperConfig.java src/main/java/com/destroystokyo/paper/PaperConfig.java
--- src_origin/main/java/com/destroystokyo/paper/PaperConfig.java	2016-07-02 20:41:43.809530871 +0800
+++ src/main/java/com/destroystokyo/paper/PaperConfig.java	2016-07-02 20:41:52.609530065 +0800
@@ -193,10 +193,11 @@
         }
     }
 
+    /*
     public static int minChunkLoadThreads = 2;
     private static void chunkLoadThreads() {
         minChunkLoadThreads = Math.min(6, getInt("settings.min-chunk-load-threads", 2)); // Keep people from doing stupid things with max of 6
-    }
+    }*/
 
     public static boolean enableFileIOThreadSleep;
     private static void enableFileIOThreadSleep() {
diff -Naur src_origin/main/java/net/minecraft/server/Chunk.java src/main/java/net/minecraft/server/Chunk.java
--- src_origin/main/java/net/minecraft/server/Chunk.java	2016-07-02 20:41:44.218530834 +0800
+++ src/main/java/net/minecraft/server/Chunk.java	2016-07-02 20:41:52.997530029 +0800
@@ -625,7 +625,8 @@
 
         if (i != this.locX || j != this.locZ) {
             Chunk.e.warn("Wrong location! ({}, {}) should be ({}, {}), {}", new Object[] { Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(this.locX), Integer.valueOf(this.locZ), entity, entity});
-            entity.die();
+            //entity.die();
+            entity.setPosition(this.locX, entity.locY, this.locZ);
         }
 
         int k = MathHelper.floor(entity.locY / 16.0D);
diff -Naur src_origin/main/java/net/minecraft/server/EntityBoat.java src/main/java/net/minecraft/server/EntityBoat.java
--- src_origin/main/java/net/minecraft/server/EntityBoat.java	2016-07-02 20:41:44.541530804 +0800
+++ src/main/java/net/minecraft/server/EntityBoat.java	2016-07-02 20:41:53.304530001 +0800
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -216,7 +217,7 @@
 
     private Location lastLocation; // CraftBukkit
 
-    public void m() {
+    public void m_hose() {
         this.aI = this.aH;
         this.aH = this.t();
         if (this.aH != EntityBoat.EnumStatus.UNDER_WATER && this.aH != EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
@@ -301,6 +302,96 @@
                 }
             }
         }
+    }
+    m m_task;
+    public void m() {//fork it
+        m_task = new m();
+        m_task.fork();
+        /*
+        this.aI = this.aH;
+        this.aH = this.t();
+        if (this.aH != EntityBoat.EnumStatus.UNDER_WATER && this.aH != EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
+            this.h = 0.0F;
+        } else {
+            ++this.h;
+        }
+
+        if (!this.world.isClientSide && this.h >= 60.0F) {
+            this.az();
+        }
+
+        if (this.o() > 0) {
+            this.b(this.o() - 1);
+        }
+
+        if (this.n() > 0.0F) {
+            this.setDamage(this.n() - 1.0F);
+        }
+        this.lastX = this.locX;
+        this.lastY = this.locY;
+        this.lastZ = this.locZ;
+        super.m();
+        this.s();
+        if (this.bA()) {
+            if (this.bx().size() == 0 || !(this.bx().get(0) instanceof EntityHuman)) {
+                this.a(false, false);
+            }
+
+            this.w();
+            if (this.world.isClientSide) {
+                this.x();
+                this.world.a((Packet) (new PacketPlayInBoatMove(this.a(0), this.a(1))));
+            }
+
+            this.move(this.motX, this.motY, this.motZ);
+        } else {
+            this.motX = 0.0D;
+            this.motY = 0.0D;
+            this.motZ = 0.0D;
+        }
+
+        // CraftBukkit start
+        org.bukkit.Server server = this.world.getServer();
+        org.bukkit.World bworld = this.world.getWorld();
+
+        Location to = new Location(bworld, this.locX, this.locY, this.locZ, this.yaw, this.pitch);
+        Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+        server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+        if (lastLocation != null && !lastLocation.equals(to)) {
+            VehicleMoveEvent event = new VehicleMoveEvent(vehicle, lastLocation, to);
+            server.getPluginManager().callEvent(event);
+        }
+        lastLocation = vehicle.getLocation();
+        // CraftBukkit end
+
+        for (int i = 0; i <= 1; ++i) {
+            if (this.a(i)) {
+                this.f[i] = (float) ((double) this.f[i] + 0.01D);
+            } else {
+                this.f[i] = 0.0F;
+            }
+        }
+
+        this.checkBlockCollisions();
+        List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), IEntitySelector.a(this));
+
+        if (!list.isEmpty()) {
+            boolean flag = !this.world.isClientSide && !(this.bw() instanceof EntityHuman);
+
+            for (int j = 0; j < list.size(); ++j) {
+                Entity entity = (Entity) list.get(j);
+
+                if (!entity.w(this)) {
+                    if (flag && this.bx().size() < 2 && !entity.isPassenger() && entity.width < this.width && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) {
+                        entity.startRiding(this);
+                    } else {
+                        this.collide(entity);
+                    }
+                }
+            }
+        }*/
 
     }
 
@@ -841,4 +932,15 @@
 
         private EnumStatus() {}
     }
+    
+    class m extends RecursiveAction {
+        
+        public m() {}
+
+        @Override
+        protected void compute() {
+            m_hose();
+        }
+
+    }
 }
diff -Naur src_origin/main/java/net/minecraft/server/Entity.java src/main/java/net/minecraft/server/Entity.java
--- src_origin/main/java/net/minecraft/server/Entity.java	2016-07-02 20:41:44.510530807 +0800
+++ src/main/java/net/minecraft/server/Entity.java	2016-07-02 20:41:53.268530005 +0800
@@ -26,6 +26,7 @@
 import org.bukkit.entity.Vehicle;
 import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
+import java.util.concurrent.RecursiveAction;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
 import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
@@ -321,6 +322,7 @@
         this.U();
     }
 
+    U_sub us_task;
     public void U() {
         this.world.methodProfiler.a("entityBaseTick");
         if (this.isPassenger() && this.bB().dead) {
@@ -376,7 +378,9 @@
             this.H();
             this.world.methodProfiler.b();
         }
-
+        us_task = new U_sub();
+        us_task.fork();
+        /*
         this.am();
         this.ak();
         if (this.world.isClientSide) {
@@ -394,7 +398,7 @@
 
                 --this.fireTicks;
             }
-        }
+        }*/
 
         if (this.ao()) {
             this.burnFromLava();
@@ -502,7 +506,7 @@
         return this.world.getCubes(this, axisalignedbb).isEmpty() && !this.world.containsLiquid(axisalignedbb);
     }
 
-    public void move(double d0, double d1, double d2) {
+    public void move_hose(double d0, double d1, double d2) {
         if (this.noclip) {
             this.a(this.getBoundingBox().c(d0, d1, d2));
             this.recalcPosition();
@@ -841,6 +845,337 @@
             this.world.methodProfiler.b();
         }
     }
+    
+    //move m_task;
+    public void move(double d0, double d1, double d2) {
+        /*m_task = new move(d0, d1, d2);
+        m_task.fork();*/
+        move_hose(d0, d1, d2);
+        /*
+        if (this.noclip) {
+            this.a(this.getBoundingBox().c(d0, d1, d2));
+            this.recalcPosition();
+        } else {
+            // CraftBukkit start - Don't do anything if we aren't moving
+            // We need to do this regardless of whether or not we are moving thanks to portals
+            try {
+                this.checkBlockCollisions();
+            } catch (Throwable throwable) {
+                CrashReport crashreport = CrashReport.a(throwable, "Checking entity block collision");
+                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being checked for collision");
+
+                this.appendEntityCrashDetails(crashreportsystemdetails);
+                throw new ReportedException(crashreport);
+            }
+            // Check if we're moving
+            if (d0 == 0 && d1 == 0 && d2 == 0 && this.isVehicle() && this.isPassenger()) {
+                return;
+            }
+            // CraftBukkit end
+            this.world.methodProfiler.a("move");
+            double d3 = this.locX;
+            double d4 = this.locY;
+            double d5 = this.locZ;
+
+            if (this.E) {
+                this.E = false;
+                d0 *= 0.25D;
+                d1 *= 0.05000000074505806D;
+                d2 *= 0.25D;
+                this.motX = 0.0D;
+                this.motY = 0.0D;
+                this.motZ = 0.0D;
+            }
+
+            double d6 = d0;
+            double d7 = d1;
+            double d8 = d2;
+            boolean flag = this.onGround && this.isSneaking() && this instanceof EntityHuman;
+
+            if (flag) {
+                for (double d9 = 0.05D; d0 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0D, 0.0D)).isEmpty(); d6 = d0) {
+                    if (d0 < 0.05D && d0 >= -0.05D) {
+                        d0 = 0.0D;
+                    } else if (d0 > 0.0D) {
+                        d0 -= 0.05D;
+                    } else {
+                        d0 += 0.05D;
+                    }
+                }
+
+                for (; d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(0.0D, -1.0D, d2)).isEmpty(); d8 = d2) {
+                    if (d2 < 0.05D && d2 >= -0.05D) {
+                        d2 = 0.0D;
+                    } else if (d2 > 0.0D) {
+                        d2 -= 0.05D;
+                    } else {
+                        d2 += 0.05D;
+                    }
+                }
+
+                for (; d0 != 0.0D && d2 != 0.0D && this.world.getCubes(this, this.getBoundingBox().c(d0, -1.0D, d2)).isEmpty(); d8 = d2) {
+                    if (d0 < 0.05D && d0 >= -0.05D) {
+                        d0 = 0.0D;
+                    } else if (d0 > 0.0D) {
+                        d0 -= 0.05D;
+                    } else {
+                        d0 += 0.05D;
+                    }
+
+                    d6 = d0;
+                    if (d2 < 0.05D && d2 >= -0.05D) {
+                        d2 = 0.0D;
+                    } else if (d2 > 0.0D) {
+                        d2 -= 0.05D;
+                    } else {
+                        d2 += 0.05D;
+                    }
+                }
+            }
+
+            List list = this.world.getCubes(this, this.getBoundingBox().a(d0, d1, d2));
+            AxisAlignedBB axisalignedbb = this.getBoundingBox();
+            int i = 0;
+
+            int j;
+
+            for (j = list.size(); i < j; ++i) {
+                d1 = ((AxisAlignedBB) list.get(i)).b(this.getBoundingBox(), d1);
+            }
+
+            this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
+            boolean flag1 = this.onGround || d7 != d1 && d7 < 0.0D;
+
+            j = 0;
+
+            int k;
+
+            for (k = list.size(); j < k; ++j) {
+                d0 = ((AxisAlignedBB) list.get(j)).a(this.getBoundingBox(), d0);
+            }
+
+            this.a(this.getBoundingBox().c(d0, 0.0D, 0.0D));
+            j = 0;
+
+            for (k = list.size(); j < k; ++j) {
+                d2 = ((AxisAlignedBB) list.get(j)).c(this.getBoundingBox(), d2);
+            }
+
+            this.a(this.getBoundingBox().c(0.0D, 0.0D, d2));
+            double d10;
+
+            if (this.P > 0.0F && flag1 && (d6 != d0 || d8 != d2)) {
+                double d11 = d0;
+                double d12 = d1;
+                double d13 = d2;
+                AxisAlignedBB axisalignedbb1 = this.getBoundingBox();
+
+                this.a(axisalignedbb);
+                d1 = (double) this.P;
+                List list1 = this.world.getCubes(this, this.getBoundingBox().a(d6, d1, d8));
+                AxisAlignedBB axisalignedbb2 = this.getBoundingBox();
+                AxisAlignedBB axisalignedbb3 = axisalignedbb2.a(d6, 0.0D, d8);
+
+                d10 = d1;
+                int l = 0;
+
+                for (int i1 = list1.size(); l < i1; ++l) {
+                    d10 = ((AxisAlignedBB) list1.get(l)).b(axisalignedbb3, d10);
+                }
+
+                axisalignedbb2 = axisalignedbb2.c(0.0D, d10, 0.0D);
+                double d14 = d6;
+                int j1 = 0;
+
+                for (int k1 = list1.size(); j1 < k1; ++j1) {
+                    d14 = ((AxisAlignedBB) list1.get(j1)).a(axisalignedbb2, d14);
+                }
+
+                axisalignedbb2 = axisalignedbb2.c(d14, 0.0D, 0.0D);
+                double d15 = d8;
+                int l1 = 0;
+
+                for (int i2 = list1.size(); l1 < i2; ++l1) {
+                    d15 = ((AxisAlignedBB) list1.get(l1)).c(axisalignedbb2, d15);
+                }
+
+                axisalignedbb2 = axisalignedbb2.c(0.0D, 0.0D, d15);
+                AxisAlignedBB axisalignedbb4 = this.getBoundingBox();
+                double d16 = d1;
+                int j2 = 0;
+
+                for (int k2 = list1.size(); j2 < k2; ++j2) {
+                    d16 = ((AxisAlignedBB) list1.get(j2)).b(axisalignedbb4, d16);
+                }
+
+                axisalignedbb4 = axisalignedbb4.c(0.0D, d16, 0.0D);
+                double d17 = d6;
+                int l2 = 0;
+
+                for (int i3 = list1.size(); l2 < i3; ++l2) {
+                    d17 = ((AxisAlignedBB) list1.get(l2)).a(axisalignedbb4, d17);
+                }
+
+                axisalignedbb4 = axisalignedbb4.c(d17, 0.0D, 0.0D);
+                double d18 = d8;
+                int j3 = 0;
+
+                for (int k3 = list1.size(); j3 < k3; ++j3) {
+                    d18 = ((AxisAlignedBB) list1.get(j3)).c(axisalignedbb4, d18);
+                }
+
+                axisalignedbb4 = axisalignedbb4.c(0.0D, 0.0D, d18);
+                double d19 = d14 * d14 + d15 * d15;
+                double d20 = d17 * d17 + d18 * d18;
+
+                if (d19 > d20) {
+                    d0 = d14;
+                    d2 = d15;
+                    d1 = -d10;
+                    this.a(axisalignedbb2);
+                } else {
+                    d0 = d17;
+                    d2 = d18;
+                    d1 = -d16;
+                    this.a(axisalignedbb4);
+                }
+
+                int l3 = 0;
+
+                for (int i4 = list1.size(); l3 < i4; ++l3) {
+                    d1 = ((AxisAlignedBB) list1.get(l3)).b(this.getBoundingBox(), d1);
+                }
+
+                this.a(this.getBoundingBox().c(0.0D, d1, 0.0D));
+                if (d11 * d11 + d13 * d13 >= d0 * d0 + d2 * d2) {
+                    d0 = d11;
+                    d1 = d12;
+                    d2 = d13;
+                    this.a(axisalignedbb1);
+                }
+            }
+
+            this.world.methodProfiler.b();
+            this.world.methodProfiler.a("rest");
+            this.recalcPosition();
+            this.positionChanged = d6 != d0 || d8 != d2;
+            this.B = d7 != d1;
+            this.onGround = this.B && d7 < 0.0D;
+            this.C = this.positionChanged || this.B;
+            j = MathHelper.floor(this.locX);
+            k = MathHelper.floor(this.locY - 0.20000000298023224D);
+            int j4 = MathHelper.floor(this.locZ);
+            BlockPosition blockposition = new BlockPosition(j, k, j4);
+            IBlockData iblockdata = this.world.getType(blockposition);
+
+            if (iblockdata.getMaterial() == Material.AIR) {
+                BlockPosition blockposition1 = blockposition.down();
+                IBlockData iblockdata1 = this.world.getType(blockposition1);
+                Block block = iblockdata1.getBlock();
+
+                if (block instanceof BlockFence || block instanceof BlockCobbleWall || block instanceof BlockFenceGate) {
+                    iblockdata = iblockdata1;
+                    blockposition = blockposition1;
+                }
+            }
+
+            this.a(d1, this.onGround, iblockdata, blockposition);
+            if (d6 != d0) {
+                this.motX = 0.0D;
+            }
+
+            if (d8 != d2) {
+                this.motZ = 0.0D;
+            }
+
+            Block block1 = iblockdata.getBlock();
+
+            if (d7 != d1) {
+                block1.a(this.world, this);
+            }
+
+            // CraftBukkit start
+            if (positionChanged && getBukkitEntity() instanceof Vehicle) {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.block.Block bl = this.world.getWorld().getBlockAt(MathHelper.floor(this.locX), MathHelper.floor(this.locY), MathHelper.floor(this.locZ));
+
+                if (d6 > d0) {
+                    bl = bl.getRelative(BlockFace.EAST);
+                } else if (d6 < d0) {
+                    bl = bl.getRelative(BlockFace.WEST);
+                } else if (d8 > d2) {
+                    bl = bl.getRelative(BlockFace.SOUTH);
+                } else if (d8 < d2) {
+                    bl = bl.getRelative(BlockFace.NORTH);
+                }
+
+                VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                world.getServer().getPluginManager().callEvent(event);
+            }
+            // CraftBukkit end
+
+            if (this.playStepSound() && !flag && !this.isPassenger()) {
+                double d21 = this.locX - d3;
+                double d22 = this.locY - d4;
+
+                d10 = this.locZ - d5;
+                if (block1 != Blocks.LADDER) {
+                    d22 = 0.0D;
+                }
+
+                if (block1 != null && this.onGround) {
+                    block1.stepOn(this.world, blockposition, this);
+                }
+
+                this.J = (float) ((double) this.J + (double) MathHelper.sqrt(d21 * d21 + d10 * d10) * 0.6D);
+                this.K = (float) ((double) this.K + (double) MathHelper.sqrt(d21 * d21 + d22 * d22 + d10 * d10) * 0.6D);
+                if (this.K > (float) this.ax && iblockdata.getMaterial() != Material.AIR) {
+                    this.ax = (int) this.K + 1;
+                    if (this.isInWater()) {
+                        float f = MathHelper.sqrt(this.motX * this.motX * 0.20000000298023224D + this.motY * this.motY + this.motZ * this.motZ * 0.20000000298023224D) * 0.35F;
+
+                        if (f > 1.0F) {
+                            f = 1.0F;
+                        }
+
+                        this.a(this.aa(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                    }
+
+                    this.a(blockposition, block1);
+                }
+            }
+
+            boolean flag2 = this.ai();
+
+            if (this.world.f(this.getBoundingBox().shrink(0.001D))) {
+                this.burn(1);
+                if (!flag2) {
+                    ++this.fireTicks;
+                    // CraftBukkit start - Not on fire yet
+                    if (this.fireTicks <= 0) { // Only throw events on the first combust, otherwise it spams
+                        EntityCombustEvent event = new org.bukkit.event.entity.EntityCombustByBlockEvent(null, getBukkitEntity(), 8);
+                        world.getServer().getPluginManager().callEvent(event);
+
+                        if (!event.isCancelled()) {
+                            setOnFire(event.getDuration());
+                        }
+                    } else {
+                        // CraftBukkit end
+                        this.setOnFire(8);
+                    }
+                }
+            } else if (this.fireTicks <= 0) {
+                this.fireTicks = -this.maxFireTicks;
+            }
+
+            if (flag2 && this.fireTicks > 0) {
+                this.a(SoundEffects.bG, 0.7F, 1.6F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
+                this.fireTicks = -this.maxFireTicks;
+            }
+
+            this.world.methodProfiler.b();
+        }*/
+    }
 
     public void recalcPosition() {
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
@@ -1222,7 +1557,7 @@
 
     public void d(EntityHuman entityhuman) {}
 
-    public void collide(Entity entity) {
+    public void collide_hose(Entity entity) {
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1257,6 +1592,46 @@
             }
         }
     }
+    
+    collide c_task;
+    public void collide(Entity entity) {//fork it
+        c_task = new collide(entity);
+        c_task.fork();
+        /*
+        if (!this.x(entity)) {
+            if (!entity.noclip && !this.noclip) {
+                double d0 = entity.locX - this.locX;
+                double d1 = entity.locZ - this.locZ;
+                double d2 = MathHelper.a(d0, d1);
+
+                if (d2 >= 0.009999999776482582D) {
+                    d2 = (double) MathHelper.sqrt(d2);
+                    d0 /= d2;
+                    d1 /= d2;
+                    double d3 = 1.0D / d2;
+
+                    if (d3 > 1.0D) {
+                        d3 = 1.0D;
+                    }
+
+                    d0 *= d3;
+                    d1 *= d3;
+                    d0 *= 0.05000000074505806D;
+                    d1 *= 0.05000000074505806D;
+                    d0 *= (double) (1.0F - this.R);
+                    d1 *= (double) (1.0F - this.R);
+                    if (!this.isVehicle()) {
+                        this.g(-d0, 0.0D, -d1);
+                    }
+
+                    if (!entity.isVehicle()) {
+                        entity.g(d0, 0.0D, d1);
+                    }
+                }
+
+            }
+        }*/
+    }
 
     public void g(double d0, double d1, double d2) {
         // Paper start - OBFHELPER
@@ -2754,4 +3129,70 @@
 
         }
     }
+    
+    
+    class U_sub extends RecursiveAction {
+        
+        public U_sub() {}
+
+        @Override
+        protected void compute() {
+            am();
+            ak();
+            if (world.isClientSide) {
+                fireTicks = 0;
+            } else if (fireTicks > 0) {
+                if (fireProof) {
+                    fireTicks -= 4;
+                    if (fireTicks < 0) {
+                        fireTicks = 0;
+                    }
+                } else {
+                    if (fireTicks % 20 == 0) {
+                        damageEntity(DamageSource.BURN, 1.0F);
+                    }
+
+                    --fireTicks;
+                }
+            }
+        }
+
+    }
+    
+    class collide extends RecursiveAction {
+        Entity entity;
+        
+        public collide(Entity entity) {
+            this.entity = entity;
+        }
+
+        @Override
+        protected void compute() {
+            collide_hose(entity);
+        }
+
+    }
+    
+    /*
+    class move extends RecursiveAction {
+        double d0, d1, d2;
+        
+        public move(double d0, double d1, double d2) {
+            this.d0 = d0;
+            this.d1 = d1;
+            this.d2 = d2;
+        }
+
+        @Override
+        protected void compute() {
+            try {
+                move_hose(d0, d1, d2);
+            } catch (Exception ex) {
+                world.entityList.remove(this);
+                System.out.println(ex);
+            }
+        }
+
+    }*/
+     
 }
diff -Naur src_origin/main/java/net/minecraft/server/MinecraftServer.java src/main/java/net/minecraft/server/MinecraftServer.java
--- src_origin/main/java/net/minecraft/server/MinecraftServer.java	2016-07-02 20:41:45.182530746 +0800
+++ src/main/java/net/minecraft/server/MinecraftServer.java	2016-07-02 20:41:53.912529946 +0800
@@ -1093,7 +1093,8 @@
     }
 
     public String getServerModName() {
-        return "Paper"; //Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        //return "Paper"; //Paper - Paper > // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "HOSE"; // HOSE -> Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
@@ -1175,7 +1176,8 @@
     }
 
     public String getName() {
-        return "Server";
+        //return "Server";
+        return org.bukkit.ChatColor.GREEN + "Server";
     }
 
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
diff -Naur src_origin/main/java/net/minecraft/server/PlayerList.java src/main/java/net/minecraft/server/PlayerList.java
--- src_origin/main/java/net/minecraft/server/PlayerList.java	2016-07-02 20:41:45.490530717 +0800
+++ src/main/java/net/minecraft/server/PlayerList.java	2016-07-02 20:41:54.185529921 +0800
@@ -356,7 +356,7 @@
             }
         }
 
-        ChunkIOExecutor.adjustPoolSize(getPlayerCount());
+        //ChunkIOExecutor.adjustPoolSize(getPlayerCount());
         // CraftBukkit end
 
         // CraftBukkit start - sendAll above replaced with this loop
@@ -452,7 +452,7 @@
         cserver.getScoreboardManager().removePlayer(entityplayer.getBukkitEntity());
         // CraftBukkit end
 
-        ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
+        //ChunkIOExecutor.adjustPoolSize(this.getPlayerCount()); // CraftBukkit
 
         return playerQuitEvent.getQuitMessage(); // CraftBukkit
     }
diff -Naur src_origin/main/java/net/minecraft/server/World.java src/main/java/net/minecraft/server/World.java
--- src_origin/main/java/net/minecraft/server/World.java	2016-07-02 20:41:45.777530691 +0800
+++ src/main/java/net/minecraft/server/World.java	2016-07-02 20:41:54.456529896 +0800
@@ -18,6 +18,7 @@
 
 // CraftBukkit start
 import com.google.common.collect.Maps;
+import com.google.common.collect.Queues;
 import java.util.HashMap; // Paper
 import java.util.Map;
 import org.bukkit.Bukkit;
@@ -36,6 +37,8 @@
 // Paper start
 import java.util.Set;
 import com.google.common.collect.Sets;
+import java.util.Queue;
+import java.util.concurrent.RecursiveAction;
 // Paper end
 
 public abstract class World implements IBlockAccess {
@@ -1015,8 +1018,11 @@
 
     }
 
+    addparticle ap_task;
     public void addParticle(EnumParticle enumparticle, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
-        this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+        //this.a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+        ap_task = new addparticle(enumparticle, d0, d1, d2, d3, d4, d5, aint);
+        ap_task.fork();
     }
 
     private void a(int i, boolean flag, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
@@ -1436,6 +1442,55 @@
 
     public void b(BlockPosition blockposition, Block block, int i, int j) {}
 
+    public void tick_hose(Entity entity) {
+        Entity entity1 = entity.bB();
+
+        if (entity1 != null) {
+            if (!entity1.dead && entity1.w(entity)) {
+                return;
+            }
+
+            entity.stopRiding();
+        }
+
+        this.methodProfiler.a("tick");
+        if (!entity.dead && !(entity instanceof EntityPlayer)) {
+            try {
+                entity.tickTimer.startTiming(); // Paper
+                this.g(entity);
+                entity.tickTimer.stopTiming(); // Paper
+            } catch (Throwable throwable1) {
+                entity.tickTimer.stopTiming();
+                // Paper start - Prevent tile entity and entity crashes
+                String msg = "Entity threw exception at " + entity.world.getWorld().getName() + ":" + entity.locX + "," + entity.locY + "," + entity.locZ;
+                System.err.println(msg);
+                throwable1.printStackTrace();
+                getServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable1)));
+                entity.dead = true;
+                return;
+                // Paper end
+            }
+        }
+
+        this.methodProfiler.b();
+        this.methodProfiler.a("remove");
+        if (entity.dead) {
+            int j = entity.ac;
+            int l = entity.ae;
+
+            if (entity.ab && this.isChunkLoaded(j, l, true)) {
+                this.getChunkAt(j, l).b(entity);
+            }
+
+            guardEntityList = false; // Spigot
+            this.entityList.remove(entity); // CraftBukkit - Use field for loop variable
+            guardEntityList = true; // Spigot
+            this.c(entity);
+        }
+
+        this.methodProfiler.b();
+    }
+
     public void tickEntities() {
         this.methodProfiler.a("entities");
         this.methodProfiler.a("global");
@@ -1508,11 +1563,16 @@
         int entitiesThisCycle = 0;
         // Paper start - Disable tick limiters
         //if (tickPosition < 0) tickPosition = 0;
+        Queue<RecursiveAction> forks = Queues.newConcurrentLinkedQueue();
         for (tickPosition = 0; tickPosition < entityList.size(); tickPosition++) {
             // Paper end
             tickPosition = (tickPosition < entityList.size()) ? tickPosition : 0;
             entity = (Entity) this.entityList.get(this.tickPosition);
+            tick_hose(entity);
+            //et_task = new enityt_tick(entity);
+            //forks.offer(et_task);
             // CraftBukkit end
+            /*
             Entity entity1 = entity.bB();
 
             if (entity1 != null) {
@@ -1558,8 +1618,13 @@
                 this.c(entity);
             }
 
-            this.methodProfiler.b();
+            this.methodProfiler.b();*/
         }
+        /*
+        for (RecursiveAction re : forks) {
+            re.fork();
+            re.join();
+        }*/
         guardEntityList = false; // Spigot
 
         timings.entityTick.stopTiming(); // Spigot
@@ -3271,4 +3336,28 @@
     public LootTableRegistry ak() {
         return this.B;
     }
+    
+    class addparticle extends RecursiveAction {
+        EnumParticle enumparticle;
+        double d0, d1, d2, d3, d4, d5;
+        int[] aint;
+        
+        public addparticle(EnumParticle enumparticle, double d0, double d1, double d2, double d3, double d4, double d5, int... aint) {
+            this.enumparticle = enumparticle;
+            this.d0 = d0;
+            this.d1 = d1;
+            this.d2 = d2;
+            this.d3 = d3;
+            this.d4 = d4;
+            this.d5 = d5;
+            this.aint = aint;
+        }
+
+        @Override
+        protected void compute() {
+            a(enumparticle.c(), enumparticle.e(), d0, d1, d2, d3, d4, d5, aint);
+        }
+
+    }
+    
 }
diff -Naur src_origin/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java
--- src_origin/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java	2016-07-02 20:41:46.842530594 +0800
+++ src/main/java/org/bukkit/craftbukkit/chunkio/ChunkIOExecutor.java	2016-07-02 20:41:55.427529807 +0800
@@ -1,6 +1,6 @@
 package org.bukkit.craftbukkit.chunkio;
 
-import com.destroystokyo.paper.PaperConfig;
+//import com.destroystokyo.paper.PaperConfig;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.ChunkProviderServer;
 import net.minecraft.server.ChunkRegionLoader;
@@ -9,8 +9,9 @@
 import org.bukkit.craftbukkit.util.AsynchronousExecutor;
 
 public class ChunkIOExecutor {
-    static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
-    static final int PLAYERS_PER_THREAD = 50;
+    //static final int BASE_THREADS = PaperConfig.minChunkLoadThreads; // Paper
+    static final int BASE_THREADS =  Runtime.getRuntime().availableProcessors(); // Paper
+    //static final int PLAYERS_PER_THREAD = 50;
 
     private static final AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException> instance = new AsynchronousExecutor<QueuedChunk, Chunk, Runnable, RuntimeException>(new ChunkIOProvider(), BASE_THREADS);
 
@@ -27,10 +28,11 @@
         instance.drop(new QueuedChunk(x, z, null, world, null), runnable);
     }
 
+    /*
     public static void adjustPoolSize(int players) {
         int size = Math.max(BASE_THREADS, (int) Math.ceil(players / PLAYERS_PER_THREAD));
         instance.setActiveThreads(size);
-    }
+    }*/
 
     public static void tick() {
         instance.finishActive();
