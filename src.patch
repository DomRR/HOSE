diff -Naur src_origin/main/java/net/minecraft/server/BlockRedstoneWire.java src/main/java/net/minecraft/server/BlockRedstoneWire.java
--- src_origin/main/java/net/minecraft/server/BlockRedstoneWire.java	2016-06-26 02:37:02.548007287 +0800
+++ src/main/java/net/minecraft/server/BlockRedstoneWire.java	2016-06-26 02:37:00.272007496 +0800
@@ -20,7 +20,8 @@
     public static final BlockStateInteger POWER = BlockStateInteger.of("power", 0, 15);
     protected static final AxisAlignedBB[] f = new AxisAlignedBB[] { new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 0.8125D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.1875D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.1875D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 0.8125D), new AxisAlignedBB(0.0D, 0.0D, 0.0D, 1.0D, 0.0625D, 1.0D)};
     private boolean g = true;
-    private final Set<BlockPosition> B = Sets.newHashSet();
+    //private final Set<BlockPosition> B = Sets.newHashSet();
+    private final Set<BlockPosition> B = Sets.newConcurrentHashSet();
 
     public BlockRedstoneWire() {
         super(Material.ORIENTABLE);
diff -Naur src_origin/main/java/net/minecraft/server/EntityBoat.java src/main/java/net/minecraft/server/EntityBoat.java
--- src_origin/main/java/net/minecraft/server/EntityBoat.java	2016-06-26 02:37:02.883007256 +0800
+++ src/main/java/net/minecraft/server/EntityBoat.java	2016-06-26 02:37:00.601007466 +0800
@@ -3,6 +3,7 @@
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -12,6 +13,7 @@
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.spigotmc.SpigotWorldConfig;
 // CraftBukkit end
 
 public class EntityBoat extends Entity {
@@ -216,7 +218,7 @@
 
     private Location lastLocation; // CraftBukkit
 
-    public void m() {
+    public void m_hose() {
         this.aI = this.aH;
         this.aH = this.t();
         if (this.aH != EntityBoat.EnumStatus.UNDER_WATER && this.aH != EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
@@ -303,6 +305,96 @@
         }
 
     }
+    
+    public void m() {//fork it
+        SpigotWorldConfig.TickQueue.add(new move());
+        /*
+        this.aI = this.aH;
+        this.aH = this.t();
+        if (this.aH != EntityBoat.EnumStatus.UNDER_WATER && this.aH != EntityBoat.EnumStatus.UNDER_FLOWING_WATER) {
+            this.h = 0.0F;
+        } else {
+            ++this.h;
+        }
+
+        if (!this.world.isClientSide && this.h >= 60.0F) {
+            this.az();
+        }
+
+        if (this.o() > 0) {
+            this.b(this.o() - 1);
+        }
+
+        if (this.n() > 0.0F) {
+            this.setDamage(this.n() - 1.0F);
+        }
+        this.lastX = this.locX;
+        this.lastY = this.locY;
+        this.lastZ = this.locZ;
+        super.m();
+        this.s();
+        if (this.bA()) {
+            if (this.bx().size() == 0 || !(this.bx().get(0) instanceof EntityHuman)) {
+                this.a(false, false);
+            }
+
+            this.w();
+            if (this.world.isClientSide) {
+                this.x();
+                this.world.a((Packet) (new PacketPlayInBoatMove(this.a(0), this.a(1))));
+            }
+
+            this.move(this.motX, this.motY, this.motZ);
+        } else {
+            this.motX = 0.0D;
+            this.motY = 0.0D;
+            this.motZ = 0.0D;
+        }
+
+        // CraftBukkit start
+        org.bukkit.Server server = this.world.getServer();
+        org.bukkit.World bworld = this.world.getWorld();
+
+        Location to = new Location(bworld, this.locX, this.locY, this.locZ, this.yaw, this.pitch);
+        Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+        server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+        if (lastLocation != null && !lastLocation.equals(to)) {
+            VehicleMoveEvent event = new VehicleMoveEvent(vehicle, lastLocation, to);
+            server.getPluginManager().callEvent(event);
+        }
+        lastLocation = vehicle.getLocation();
+        // CraftBukkit end
+
+        for (int i = 0; i <= 1; ++i) {
+            if (this.a(i)) {
+                this.f[i] = (float) ((double) this.f[i] + 0.01D);
+            } else {
+                this.f[i] = 0.0F;
+            }
+        }
+
+        this.checkBlockCollisions();
+        List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), IEntitySelector.a(this));
+
+        if (!list.isEmpty()) {
+            boolean flag = !this.world.isClientSide && !(this.bw() instanceof EntityHuman);
+
+            for (int j = 0; j < list.size(); ++j) {
+                Entity entity = (Entity) list.get(j);
+
+                if (!entity.w(this)) {
+                    if (flag && this.bx().size() < 2 && !entity.isPassenger() && entity.width < this.width && entity instanceof EntityLiving && !(entity instanceof EntityWaterAnimal) && !(entity instanceof EntityHuman)) {
+                        entity.startRiding(this);
+                    } else {
+                        this.collide(entity);
+                    }
+                }
+            }
+        }*/
+
+    }
 
     private void s() {
         if (this.av > 0 && !this.bA()) {
@@ -841,4 +933,15 @@
 
         private EnumStatus() {}
     }
+    
+    class move extends RecursiveAction {
+
+        public move(){}
+
+        @Override
+        protected void compute() {
+            m_hose();
+        }
+
+    }
 }
diff -Naur src_origin/main/java/net/minecraft/server/Entity.java src/main/java/net/minecraft/server/Entity.java
--- src_origin/main/java/net/minecraft/server/Entity.java	2016-06-26 02:37:02.864007258 +0800
+++ src/main/java/net/minecraft/server/Entity.java	2016-06-26 02:37:00.564007469 +0800
@@ -11,6 +11,7 @@
 import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -37,6 +38,7 @@
 import org.bukkit.event.entity.EntityCombustEvent;
 import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
+import org.spigotmc.SpigotWorldConfig;
 // CraftBukkit end
 
 public abstract class Entity implements ICommandListener {
@@ -773,7 +775,7 @@
             }
             */
             // CraftBukkit end
-
+            
             boolean flag2 = this.ai();
 
             if (this.world.f(this.getBoundingBox().shrink(0.001D))) {
@@ -1175,7 +1177,7 @@
 
     public void d(EntityHuman entityhuman) {}
 
-    public void collide(Entity entity) {
+    public void collide_hose(Entity entity) {//hose
         if (!this.x(entity)) {
             if (!entity.noclip && !this.noclip) {
                 double d0 = entity.locX - this.locX;
@@ -1210,6 +1212,43 @@
             }
         }
     }
+    public void collide(Entity entity) {//fork this
+        SpigotWorldConfig.TickQueue.add(new collide(entity));
+        /*
+        if (!this.x(entity)) {
+            if (!entity.noclip && !this.noclip) {
+                double d0 = entity.locX - this.locX;
+                double d1 = entity.locZ - this.locZ;
+                double d2 = MathHelper.a(d0, d1);
+
+                if (d2 >= 0.009999999776482582D) {
+                    d2 = (double) MathHelper.sqrt(d2);
+                    d0 /= d2;
+                    d1 /= d2;
+                    double d3 = 1.0D / d2;
+
+                    if (d3 > 1.0D) {
+                        d3 = 1.0D;
+                    }
+
+                    d0 *= d3;
+                    d1 *= d3;
+                    d0 *= 0.05000000074505806D;
+                    d1 *= 0.05000000074505806D;
+                    d0 *= (double) (1.0F - this.R);
+                    d1 *= (double) (1.0F - this.R);
+                    if (!this.isVehicle()) {
+                        this.g(-d0, 0.0D, -d1);
+                    }
+
+                    if (!entity.isVehicle()) {
+                        entity.g(d0, 0.0D, d1);
+                    }
+                }
+
+            }
+        }*/
+    }
 
     public void g(double d0, double d1, double d2) {
         this.motX += d0;
@@ -2654,4 +2693,20 @@
 
         }
     }
+    
+    class collide extends RecursiveAction {
+        Entity entity;
+
+        public collide(Entity entity){
+            this.entity = entity;
+
+        }
+
+        @Override
+        protected void compute() {
+            collide_hose(entity);
+        }
+
+    }
+    
 }
diff -Naur src_origin/main/java/net/minecraft/server/EntityLiving.java src/main/java/net/minecraft/server/EntityLiving.java
--- src_origin/main/java/net/minecraft/server/EntityLiving.java	2016-06-26 02:37:03.055007241 +0800
+++ src/main/java/net/minecraft/server/EntityLiving.java	2016-06-26 02:37:00.797007448 +0800
@@ -14,6 +14,7 @@
 import java.util.ArrayList;
 import com.google.common.base.Function;
 import com.google.common.collect.Lists;
+import java.util.concurrent.RecursiveAction;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -27,6 +28,7 @@
 // CraftBukkit end
 
 import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.spigotmc.SpigotWorldConfig;
 
 public abstract class EntityLiving extends Entity {
 
@@ -1959,6 +1961,7 @@
         } else if (this.ct()) {
             this.world.methodProfiler.a("newAi");
             this.doTick();
+            //SpigotWorldConfig.TickQueue.add(new ai_tick());
             this.world.methodProfiler.b();
         }
         SpigotTimings.timerEntityAI.stopTiming(); // Spigot
@@ -1985,12 +1988,14 @@
         this.bh *= 0.9F;
         this.r();
         SpigotTimings.timerEntityAIMove.startTiming(); // Spigot
-        this.g(this.bf, this.bg);
+        //this.g(this.bf, this.bg);
+        SpigotWorldConfig.TickQueue.add(new ai_move(this.bf, this.bg));
         SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot
         this.world.methodProfiler.b();
         this.world.methodProfiler.a("push");
         SpigotTimings.timerEntityAICollision.startTiming(); // Spigot
-        this.cs();
+        //this.cs();
+        SpigotWorldConfig.TickQueue.add(new cs());
         SpigotTimings.timerEntityAICollision.stopTiming(); // Spigot
         this.world.methodProfiler.b();
     }
@@ -2022,7 +2027,7 @@
 
     protected void doTick() {}
 
-    protected void cs() {
+    protected void cs() {//fork this
         List list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
 
         if (!list.isEmpty()) {
@@ -2418,4 +2423,41 @@
 
         }
     }
+    
+    class cs extends RecursiveAction {
+
+        public cs(){}
+
+        @Override
+        protected void compute() {
+            cs();
+        }
+
+    }
+    
+    class ai_move extends RecursiveAction {
+        float f, f1;
+        
+        public ai_move(float f, float f1){
+            this.f = f;
+            this.f1 = f1;
+        }
+
+        @Override
+        protected void compute() {
+            g(f, f1);
+        }
+
+    }
+    
+    class ai_tick extends RecursiveAction {
+        
+        public ai_tick(){}
+
+        @Override
+        protected void compute() {
+            doTick();
+        }
+
+    }
 }
diff -Naur src_origin/main/java/net/minecraft/server/EntityMinecartAbstract.java src/main/java/net/minecraft/server/EntityMinecartAbstract.java
--- src_origin/main/java/net/minecraft/server/EntityMinecartAbstract.java	2016-06-26 02:37:03.072007239 +0800
+++ src/main/java/net/minecraft/server/EntityMinecartAbstract.java	2016-06-26 02:37:00.792007448 +0800
@@ -4,6 +4,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
@@ -13,6 +14,7 @@
 import org.bukkit.event.vehicle.VehicleDestroyEvent;
 import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
 import org.bukkit.util.Vector;
+import org.spigotmc.SpigotWorldConfig;
 // CraftBukkit end
 
 public abstract class EntityMinecartAbstract extends Entity implements INamableTileEntity {
@@ -708,8 +710,8 @@
         }
 
     }
-
-    public void collide(Entity entity) {
+    
+    public void collide_hose(Entity entity) {//hose
         if (!this.world.isClientSide) {
             if (!entity.noclip && !this.noclip) {
                 if (!this.w(entity)) {
@@ -782,6 +784,81 @@
         }
     }
 
+    public void collide(Entity entity) {//fork this
+        SpigotWorldConfig.TickQueue.add(new collide(entity));
+        /*
+        if (!this.world.isClientSide) {
+            if (!entity.noclip && !this.noclip) {
+                if (!this.w(entity)) {
+                    double d0 = entity.locX - this.locX;
+                    double d1 = entity.locZ - this.locZ;
+                    double d2 = d0 * d0 + d1 * d1;
+
+                    if (d2 >= 9.999999747378752E-5D) {
+                        d2 = (double) MathHelper.sqrt(d2);
+                        d0 /= d2;
+                        d1 /= d2;
+                        double d3 = 1.0D / d2;
+
+                        if (d3 > 1.0D) {
+                            d3 = 1.0D;
+                        }
+
+                        d0 *= d3;
+                        d1 *= d3;
+                        d0 *= 0.10000000149011612D;
+                        d1 *= 0.10000000149011612D;
+                        d0 *= (double) (1.0F - this.R);
+                        d1 *= (double) (1.0F - this.R);
+                        d0 *= 0.5D;
+                        d1 *= 0.5D;
+                        if (entity instanceof EntityMinecartAbstract) {
+                            double d4 = entity.locX - this.locX;
+                            double d5 = entity.locZ - this.locZ;
+                            Vec3D vec3d = (new Vec3D(d4, 0.0D, d5)).a();
+                            Vec3D vec3d1 = (new Vec3D((double) MathHelper.cos(this.yaw * 0.017453292F), 0.0D, (double) MathHelper.sin(this.yaw * 0.017453292F))).a();
+                            double d6 = Math.abs(vec3d.b(vec3d1));
+
+                            if (d6 < 0.800000011920929D) {
+                                return;
+                            }
+
+                            double d7 = entity.motX + this.motX;
+                            double d8 = entity.motZ + this.motZ;
+
+                            if (((EntityMinecartAbstract) entity).v() == EntityMinecartAbstract.EnumMinecartType.FURNACE && this.v() != EntityMinecartAbstract.EnumMinecartType.FURNACE) {
+                                this.motX *= 0.20000000298023224D;
+                                this.motZ *= 0.20000000298023224D;
+                                this.g(entity.motX - d0, 0.0D, entity.motZ - d1);
+                                entity.motX *= 0.949999988079071D;
+                                entity.motZ *= 0.949999988079071D;
+                            } else if (((EntityMinecartAbstract) entity).v() != EntityMinecartAbstract.EnumMinecartType.FURNACE && this.v() == EntityMinecartAbstract.EnumMinecartType.FURNACE) {
+                                entity.motX *= 0.20000000298023224D;
+                                entity.motZ *= 0.20000000298023224D;
+                                entity.g(this.motX + d0, 0.0D, this.motZ + d1);
+                                this.motX *= 0.949999988079071D;
+                                this.motZ *= 0.949999988079071D;
+                            } else {
+                                d7 /= 2.0D;
+                                d8 /= 2.0D;
+                                this.motX *= 0.20000000298023224D;
+                                this.motZ *= 0.20000000298023224D;
+                                this.g(d7 - d0, 0.0D, d8 - d1);
+                                entity.motX *= 0.20000000298023224D;
+                                entity.motZ *= 0.20000000298023224D;
+                                entity.g(d7 + d0, 0.0D, d8 + d1);
+                            }
+                        } else {
+                            this.g(-d0, 0.0D, -d1);
+                            entity.g(d0 / 4.0D, 0.0D, d1 / 4.0D);
+                        }
+                    }
+
+                }
+            }
+        }*/
+    }
+
     public void setDamage(float f) {
         this.datawatcher.set(EntityMinecartAbstract.c, Float.valueOf(f));
     }
@@ -968,4 +1045,18 @@
         derailedZ = derailed.getZ();
     }
     // CraftBukkit end
+    class collide extends RecursiveAction {
+        Entity entity;
+
+        public collide(Entity entity){
+            this.entity = entity;
+
+        }
+
+        @Override
+        protected void compute() {
+            collide_hose(entity);
+        }
+
+    }
 }
diff -Naur src_origin/main/java/net/minecraft/server/MinecraftServer.java src/main/java/net/minecraft/server/MinecraftServer.java
--- src_origin/main/java/net/minecraft/server/MinecraftServer.java	2016-06-26 02:37:03.455007204 +0800
+++ src/main/java/net/minecraft/server/MinecraftServer.java	2016-06-26 02:37:01.154007415 +0800
@@ -40,6 +40,7 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executors;
 import java.util.concurrent.FutureTask;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import org.apache.commons.lang3.Validate;
@@ -51,6 +52,7 @@
 import org.bukkit.craftbukkit.CraftServer;
 // CraftBukkit end
 import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.spigotmc.SpigotWorldConfig;
 
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
@@ -752,6 +754,15 @@
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
         SpigotTimings.chunkIOTickTimer.stopTiming(); // Spigot
 
+        //light tick
+        while (!SpigotWorldConfig.LightQueue.isEmpty()) {
+            try {
+                SpigotWorldConfig.LightPool.execute(SpigotWorldConfig.LightQueue.poll());
+            } catch (Exception ex) {
+                LOGGER.warn(ex);
+            }
+        }
+        
         SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
         // Send time updates to everyone, it will get the right time from the world the player is in.
         if (this.ticks % 20 == 0) {
@@ -803,6 +814,15 @@
                     worldserver.timings.tickEntities.startTiming(); // Spigot
                     worldserver.tickEntities();
                     worldserver.timings.tickEntities.stopTiming(); // Spigot
+                    
+                    //entities collide
+                    while (!SpigotWorldConfig.TickQueue.isEmpty()) {
+                        try {
+                            SpigotWorldConfig.TickPool.execute(SpigotWorldConfig.TickQueue.poll());
+                        } catch (Exception ex) {
+                            LOGGER.warn(ex);
+                        }
+                    }
                 } catch (Throwable throwable1) {
                     // Spigot Start
                     try {
@@ -1034,7 +1054,8 @@
     }
 
     public String getServerModName() {
-        return "Spigot"; // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        //return "Spigot"; // Spigot - Spigot > // CraftBukkit - cb > vanilla!
+        return "HOSE"; // HOSE -> Spigot - Spigot > // CraftBukkit - cb > vanilla!
     }
 
     public CrashReport b(CrashReport crashreport) {
@@ -1116,7 +1137,8 @@
     }
 
     public String getName() {
-        return "Server";
+        //return "Server";
+        return org.bukkit.ChatColor.GREEN + "Server";
     }
 
     public void sendMessage(IChatBaseComponent ichatbasecomponent) {
diff -Naur src_origin/main/java/net/minecraft/server/SpawnerCreature.java src/main/java/net/minecraft/server/SpawnerCreature.java
--- src_origin/main/java/net/minecraft/server/SpawnerCreature.java	2016-06-26 02:37:03.762007176 +0800
+++ src/main/java/net/minecraft/server/SpawnerCreature.java	2016-06-26 02:37:01.476007385 +0800
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import gnu.trove.iterator.TIntIterator;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -44,6 +45,7 @@
             int i = 0;
             Iterator iterator = worldserver.players.iterator();
 
+            int l = 0;
             int j;
             int k;
 
@@ -51,7 +53,8 @@
                 EntityHuman entityhuman = (EntityHuman) iterator.next();
 
                 if (!entityhuman.isSpectator()) {
-                    int l = MathHelper.floor(entityhuman.locX / 16.0D);
+                    //int l = MathHelper.floor(entityhuman.locX / 16.0D);
+                    l = MathHelper.floor(entityhuman.locX / 16.0D);
 
                     j = MathHelper.floor(entityhuman.locZ / 16.0D);
                     boolean flag3 = true;
@@ -181,12 +184,59 @@
                                                         entityinsentient.setPositionRotation((double) f, (double) k3, (double) f1, worldserver.random.nextFloat() * 360.0F, 0.0F);
                                                         if (entityinsentient.cK() && entityinsentient.canSpawn()) {
                                                             groupdataentity = entityinsentient.prepare(worldserver.D(new BlockPosition(entityinsentient)), groupdataentity);
-                                                            if (entityinsentient.canSpawn()) {
+                                                            //limit spawn
+                                                            int entity_num = 0;
+                                                            TIntIterator tit;
+                                                            tit = worldserver.getChunkAt(l, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j-1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l+1, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+                                                            tit = worldserver.getChunkAt(l-1, j+1).entityCount.valueCollection().iterator();
+                                                            if (tit.hasNext()) {
+                                                                entity_num += tit.next();
+                                                            }
+
+                                                            if (entityinsentient.canSpawn() && entity_num < 500) {
                                                                 ++l2;
                                                                 worldserver.addEntity(entityinsentient, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature
                                                             } else {
                                                                 entityinsentient.die();
                                                             }
+                                                            /*
+                                                            if (entityinsentient.canSpawn()) {
+                                                                ++l2;
+                                                                worldserver.addEntity(entityinsentient, SpawnReason.NATURAL); // CraftBukkit - Added a reason for spawning this creature
+                                                            } else {
+                                                                entityinsentient.die();
+                                                            }*/
 
                                                             // Spigot start
                                                             if ( --moblimit <= 0 ) {
diff -Naur src_origin/main/java/net/minecraft/server/World.java src/main/java/net/minecraft/server/World.java
--- src_origin/main/java/net/minecraft/server/World.java	2016-06-26 02:37:03.896007164 +0800
+++ src/main/java/net/minecraft/server/World.java	2016-06-26 02:37:01.622007372 +0800
@@ -34,6 +34,8 @@
     private int a = 63;
     protected boolean d;
     // Spigot start - guard entity list from removals
+    public final List<Entity> entityList = Lists.newCopyOnWriteArrayList();
+    /*
     public final List<Entity> entityList = new java.util.ArrayList<Entity>()
     {
         @Override
@@ -57,7 +59,7 @@
                 throw new java.util.ConcurrentModificationException();
             }
         }
-    };
+    };*/
     // Spigot end
     protected final List<Entity> f = Lists.newArrayList();
     public final List<TileEntity> tileEntityList = Lists.newArrayList();
diff -Naur src_origin/main/java/net/minecraft/server/WorldServer.java src/main/java/net/minecraft/server/WorldServer.java
--- src_origin/main/java/net/minecraft/server/WorldServer.java	2016-06-26 02:37:03.986007155 +0800
+++ src/main/java/net/minecraft/server/WorldServer.java	2016-06-26 02:37:01.699007365 +0800
@@ -15,6 +15,7 @@
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+import java.util.concurrent.RecursiveAction;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
@@ -28,6 +29,7 @@
 
 import org.bukkit.event.block.BlockFormEvent;
 import org.bukkit.event.weather.LightningStrikeEvent;
+import org.spigotmc.SpigotWorldConfig;
 // CraftBukkit end
 
 public class WorldServer extends World implements IAsyncTaskHandler {
@@ -415,7 +417,8 @@
                 int k = chunk.locZ * 16;
 
                 this.methodProfiler.c("checkNextLight");
-                chunk.n();
+                //chunk.n();//fork it
+                SpigotWorldConfig.LightQueue.add(new lighttick(chunk));
                 this.methodProfiler.c("tickChunk");
                 chunk.b(false);
                 if ( !chunk.areNeighborsLoaded( 1 ) ) continue; // Spigot
@@ -1393,4 +1396,19 @@
             this();
         }
     }
+    
+    class lighttick extends RecursiveAction {
+        Chunk chunk;
+
+        public lighttick(Chunk chunk){
+            this.chunk = chunk;
+        }
+
+        @Override
+        protected void compute() {
+            chunk.n();
+        }
+
+    }
+    
 }
diff -Naur src_origin/main/java/org/spigotmc/SpigotWorldConfig.java src/main/java/org/spigotmc/SpigotWorldConfig.java
--- src_origin/main/java/org/spigotmc/SpigotWorldConfig.java	2016-06-26 02:36:59.338007581 +0800
+++ src/main/java/org/spigotmc/SpigotWorldConfig.java	2016-06-26 02:36:58.828007628 +0800
@@ -1,11 +1,124 @@
 package org.spigotmc;
 
+import com.google.common.collect.Queues;
 import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.ForkJoinWorkerThread;
+import java.util.concurrent.RecursiveAction;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
 
 public class SpigotWorldConfig
 {
+    //hose start
+    static public final int cpu_core = Runtime.getRuntime().availableProcessors();
+    /*
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory fttp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("TileTickPool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory fmp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("MovePool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory fpcp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("PlayerChunkPool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };*/
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory ftp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("TickPool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory fcp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("ChunkPool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory flp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("LightPool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    /*
+    static final ForkJoinPool.ForkJoinWorkerThreadFactory fcpp = new ForkJoinPool.ForkJoinWorkerThreadFactory() {
+        @Override
+        public ForkJoinWorkerThread newThread(ForkJoinPool pool) {
+            final ForkJoinWorkerThread thread = ForkJoinPool.defaultForkJoinWorkerThreadFactory.newThread(pool);
+            thread.setName("ChunkPopulate_Pool-" + thread.getPoolIndex());
+            return thread;
+        }
+    };
+    
+    public static ForkJoinPool TileTickPool;
+    public static ForkJoinPool MovePool;
+    public static ForkJoinPool PlayerChunkPool;*/
+    
+    
+    public static ForkJoinPool TickPool;
+    public static Queue<RecursiveAction> TickQueue = Queues.newConcurrentLinkedQueue();
+    public static ForkJoinPool LightPool;
+    public static Queue<RecursiveAction> LightQueue = Queues.newConcurrentLinkedQueue();
+    public static ForkJoinPool ChunkPool;
+    
+    /*
+    static public FutureTask CollideTask;
+        
+    static final ThreadFactory tfcp = new ThreadFactoryBuilder().setNameFormat("Collide_Pool-%d").build();
+    static public final ExecutorService collidepool_executor = Executors.newFixedThreadPool(cpu_core, tfcp);*/
+    
+    public static int worldtickentitypool_core_multiple;
+    
+    public static int getthreadnumber(){
+        return cpu_core*worldtickentitypool_core_multiple;
+    }
+    
+    private void wetp_core_multiple()
+    {
+        worldtickentitypool_core_multiple = getInt("wetp-core-multiple", 2);
+        ChunkPool = new ForkJoinPool(getthreadnumber(), fcp, null, false);
+        LightPool = new ForkJoinPool(getthreadnumber(), flp, null, false);
+        TickPool = new ForkJoinPool(getthreadnumber(), ftp, null, false);
+        
+        /*
+        TileTickPool = new ForkJoinPool(getthreadnumber(), fttp, null, false);
+        MovePool = new ForkJoinPool(getthreadnumber(), fmp, null, false);
+        PlayerChunkPool = new ForkJoinPool(getthreadnumber(), fpcp, null, false);
+        
+        ChunkFlushPool_T3 = new ForkJoinPool(getthreadnumber(), fcfpt3, null, false);
+        ChunkPopulate_Pool = new ForkJoinPool(getthreadnumber(), fcpp, null, false);*/
+        //executor = new ThreadPoolExecutor(getthreadnumber(), getthreadnumber(), 1, TimeUnit.DAYS, queue);
+        log("WETP Core Multiple: " + worldtickentitypool_core_multiple);
+    }
+    
+    
+       
+    //hose end
 
     private final String worldName;
     private final YamlConfiguration config;
